└  ─  ├ │
├─
└─









/**************************************************** Kasei Virtual Machine ******************************************************
Kasei 虚拟机统一逻辑内存地址: [内存地址, 该地址中的内容]
[0000000000000000, ????????]    // 虚拟机 IP 寄存器，保存下一次执行指令所在的内存地址，开机自动置为 [0000000000010000, ]
[0000000000000001, ????????]    // 该内存地址中，存放下一条要执行的指令内容
[0000000000000002, ????????]    // 保存一次逻辑运算的结果
[0000000000000003, ????????]    // 保存一次算数运算的结果
[0000000000000004, ????????]    // 保存一次移位运算的结果
[0000000000000005, ????????]
[0000000000000006, ????????]
[0000000000000007, ????????]
...
[0000000000010000, ????????]    // 开机首条执行指令存放位置
...
[FFFFFFFFFFFFFFFF, ????????]


CPU 指令：
数据读写指令：
write(address, content);
read(address);

跳转指令：
jump(adress);

逻辑运算指令：{and, or, not}
and(address1, address2);
or(address1, address2);
not(address);


算数指令：
add(address1, address2);
subtract(address1, address2);
multiply(address1, address2);
divide(address1, address2);

移位指令：
ro(adress);   // 右移补 0
ri(adress);   // 右移补 1
rs(adress);   // 右移补 原来最高位

lo(adress);   // 左移补 0
li(adress);   // 左移补 1
ls(adress);   // 左移补 原来最低位

ll(adress);   // 循环左移，补移出来的位
rr(adress);   // 循环右移，补移出来的位


定时器

运算器

*/

/********************************************************** Kasei Charset *******************************************************
单字符占用的位数：default == 24 bit
存储模式：低位 -- 高地址
特殊字符：null = 0; eof = -1; beg = 1;

*/


/********************************************************** Kasei Language *******************************************************
Kasei 抽象数据类型 {
    值
    数组
    函数
    对象
}

Kasei 数据类型：{

	Byte		// 单字节，对内容不作任何定义，基本数据类型之一
	Array		// 数组，基本数据类型之一
	Function    // 函数，基本数据类型之一
	
	Char		// 单字符	
	String		// 字符串
	Number		// 任意精度，任意大小的数字，内部由字符串实现
	Date		// 日期：1994-01-01 00:00:00 开始计时（以国际日期变更线的地方时为准）
	Container	// 容器，java中的对象，c中的结构体，由不同的类型组合而成，不能继承，只能组合

	本语言没有默认值，就算有也要显式标注
}

数词
代词
名词 {
    形容词
    动词{
        形容词
    }
    量词
}





Kasei 语言特性：{

    程序自身具有我的概念，我这个概念在  语言中 表现为 Kasei 这个标识符
    动态语言：语言中没有什么是静态的，都是可变的，程序中的一切都是 key/value 只是 value 中可以包含其他 key，

	自动垃圾回收,
	动态程序修改（要想实现AI必须实现程序在执行过程中更改）,
	动态程序加载,
	多线程同步,
	保留指针,
	访问方式：{Noun.xx, Noun["xx"], ["var1"]["var2"]}  ( ["var1"]["var2"]  全动态编程 ),
	纯组合模式编程  ( 抛弃继承，所有类通过组合的模式搭建，不通过继承的模式，多态的实现靠检查组合里面有没有包含的对象 )
	
}

************************************************************ Demo **********************************************************************
box Byte {
    // 底层汇编实现
}



box Array {   // 本身是固定长度
    Number length;
    // 底层汇编实现
}



box Char {
    Array<Byte>[4] bytes;
}



box String {	// 不是固定长度
    Array<Char> chars;
}




box Number {
    String str; // 所有运算通过字符串的加减来算，不通过 CPU 底层逻辑模块
}



box Date {
    Number num;
}



box Container {
    // 所有自定义容器的根容器
}



box MyContainer {
    Container container; // 自动且必须包含
}
*/


/********************************************************** Kasei DataBase *******************************************************
数据类型：{number, string, date}

*/




//从词性上分,词有两大类：实词六种（名、动、形、数、量、代）和虚词六种（副、介、连、助、叹、拟声）. 

/*
面向过程--->面向对象--->面向语言（人造语：将计算机语言与自然语言进行整合）
动词--->名词，动词--->形容词，名词，动词
noun--->object == 类 
verb--->action == 方法
adjective--->annotation == 注解
advert--->元注解
*/








container Container//所有一切都属于容器的内建，并且不支持在其他容器内内建对象，就算内建了也只是字面上的
{
	<//适用范围：
		Container;
	>
	
	switch()
	{
	//形容词
	
	//名词
	case 属性1:
	case 属性2：
	
	//副词
	
	//动词	
	case main()://Kasei虚拟机调用自执行该函数
	case dynamicModify()://动态修改代码
	}
}



adj
{
	<适用范围>
}

noun 
{
	<适用范围>
}

adverb
{
	<适用范围>
}

verb
{
	<适用范围>
}


