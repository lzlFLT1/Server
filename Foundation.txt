/** TODO Glossary&Terminology *************************************/
串行： 值多个 CPU 按顺序执行代码
并行： 指多个 CPU 同时执行，是真正的并发

并发： 指单个 CPU 根据一定的算法，调度多个线程进行运算，实际上还是串行
同步： 指多个线程共享相同内存空间时，为避免逻辑错误，同一时间只允许一个线程操作该内存空间

悲观锁： 一个线程访问共享数据时，禁止其他线程对该共享数据进行操作
乐观锁： 线程访问共享数据时，读的时候保存一个该数据的版本到内存暂存，写的时候再次读取该数据的版本，如果前后版本一致，则写入，否则回滚
读写锁： 指读取数据的时候不对数据加锁，只有执行写操作的时候才对数据加锁
可重入锁：指一个具有对象 A 锁的线程能直接进入其他同样需要 A 对象锁的代码块，而不需要重新获取 A 对象的锁才能进入
不可中断锁：指一个线程 A 想获取一把锁 lock，但是 lock 锁已经被占用，那么线程 A 只能一直阻塞等待 lock 锁被释放，而不能中途不等了，而去执行其他代码。
可中断锁：指线程 A 等待锁 lock，但是 lock 被线程 B 占用，第一种情况， A 可以主动打断 B 线程的执行，让 B 释放锁；第二种情况， A 可以主动退出等待 lock 锁。      


短连接： HTTP 协议中，一次请求创建一个 TCP 连接，请求返回后立马关闭该连接，且服务器不保存请求相关的数据，即无状态
长连接： HTTP 协议中，一次请求创建一个 TCP 连接，请求返回后服务器不关闭该 TCP 连接，客户端可以通过该 TCP 连接发送多个请求
轮询： 指客户端指定一定时间间隔发送请求到服务器，查看是否有新的数据，有则服务器返回新数据，无则返回空结果
长轮询： 指客户端像轮询一样发送请求到服务器，如果没有新数据，服务器不会立即返回空结果，而是设置一个超时时间，如果在超时时间内出现了新的数据，则返回新数据，如果没有则关闭连接
WebSocket： 跟普通是 Socket 一样，维持一个全双工的 TCP 连接，服务器可以随时推送消息到客户端，客户端也可以随时发送数据到服务器

临界区(Critical Section)： 
    保证同一时刻，只有一个线程能访问临界区中的资源
    只能在同一进程内
    操作原语：
        EnterCriticalSection() // 进入临界区 
        LeaveCriticalSection() // 离开临界区 
        
互斥量(Mutex)： 
    只有拥有互斥对象的线程才具有访问资源的权限，跟临界区很相似，但是临界区是根据线程来标志资源的可访问性，互斥量是根据一个互斥实例（对象）来标志资源的可访问性
    可以跨进程
    操作原语：
        CreateMutex() // 创建一个互斥量 
        OpenMutex() // 打开一个互斥量 
        ReleaseMutex() // 释放互斥量 
        WaitForMultipleObjects() // 等待互斥量对象

信号量(Semaphores)： 
    是指同一时间，访问共享资源的线程的最大数量
    跟操作系统的 PV 操作相似，P 申请资源 V 释放资源
    可跨进程
    操作原语：
        CreateSemaphore() // 创建一个信号量 
        OpenSemaphore() // 打开一个信号量 
        ReleaseSemaphore() // 释放信号量 
        WaitForSingleObject() // 等待信号量
    
事件(Event)： 
    用来通知线程有一些事件已发生，从而启动后继任务的开
    可跨进程

Argument：表示函数实参，即函数调用时传递参数
Parameter: 表示函数形参，即函数定义时定义的参数

State：表示可以枚举的状态
Status：表示不可确定数量的状态

Recursion,Recursive,Cascade: 编写递归级联算法，先写递归关闭条件，再编写递归操作；根据递归关闭代码的位置分为：前置递归关闭 和 后置递归关闭
Loop,Circulate: 编写多层循环嵌套算法，先写最内层的循环，再自内而外逐层编写


/** TODO Distributed Transaction 分布式事务 ***************************************/
CAP: Consistency(一致性), Availability(高可用性), Partition tolerance(分区容错性)

分布式事务解决方案：
    重试（正向补偿）：当被调代码调用不成功时，重复调用，直到成功为止
    回滚（逆向回滚）：要求调用者 提供一个逆向操作的接口 供被调者使用，被调代码失败时，调用逐级往上调用 逆向接口 回滚所有数据


    2PC: Two Phase Commit 两段提交
    TCC: Try-Confirm-Cancel
    消息队列：
    Saga 事务:
    
    
    
    



