Java 中 synchronized 关键字用法
    对象锁：
        修饰实例方法： public synchronized void func(){} , 默认锁定的是 this 实例
        修饰代码块： synchronized(instance){}
    类锁：
        修饰类方法： public static synchronized void func(){} , 默认锁定的是当前类的 Class 类的实例
        修饰代码块： synchronized(*.class){}

Summarize 总结：
    1. 每个实例（类本身实例 和 类创建实例）都有一把锁，只有请求同一把锁的线程会被阻塞
    2. synchronized 代码块（方法的话是方法体）结束或者其中抛出异常，则会立马释放所拥有的锁
    3. synchronized 代码块（方法的话是方法体）中调用非同步方法，那么其中的非同步方法是会存在并发问题的

synchronized 关键字的缺陷：
    1. 效率低：
        锁的释放场景少: 只会在同步代码块执行完或者抛异常才释放锁
        试图获得锁时不能设定超时时间：
        不能中断一个正在试图获得锁的线程：
    2. 不够灵活：
        加锁和释放锁的时机单一：只会在进入同步代码块的时候加锁，在执行完和抛异常的时候释放锁，不如读写锁（读操作的时候不加锁，写操作的时候才加锁）灵活
        每个锁仅有单一的条件（某个实例）：Lock 锁可以用 Condition 判断什么情况下才加锁
        无法知道是否成功的获取到锁


使用注意点：
    锁对象不能为 null
    作用于不宜过大
    避免死锁
    
如何设计同步代码
    使用 concurrent 包中的类 > synchronized > Lock
    
思考题：
    synchronized 锁线程调度机制
    synchronized 同时只有一个线程可以执行，性能较差，有什么办法可以提升性能？1. 缩小同步代码块；2. 使用读写锁
    自己实现一个锁
    什么是锁的升级、降级？什么是 JVM 里的偏斜锁、轻量级锁、重量级锁？
