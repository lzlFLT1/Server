package kasei.javase.jvm.memory;

/** JVM 之内存模型
 * Method Area(方法区):
 *      存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
 *      运行时常量池：方法区的一部分。
 *          Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，
 *          用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。
 *
 * Heap(堆):是被所有线程共享的一块内存区域，在虚拟机启动时创建，该区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。该区域也是垃圾收集器的主要区域。
 *      年轻代：
 *          eden(伊甸园)：
 *          Survivor1：
 *          Survivor2：
 *      老年代：
 *
 * VM Stack(虚拟机栈):
 *      1. 程序运行到一个 method()
 *      2. 创建一个 Stack Frame(栈帧)：栈帧中保存 局部变量表、操作数栈、动态链接、方法出口等信息
 *      3. Stack Frame 压栈
 *      4. 程序运行到一个 method() 的 return
 *      5. Stack Frame 出栈
 *      局部变量表：存放了编译器可知的各种基本数据类型，对象引用和returnAddress。
 *
 * Native Method Stack(本地方法栈):
 *      与 VM Stack 作用相似，区别是虚拟机栈为虚拟机执行Java方法服务，而本地方法栈为虚拟机用到的Native方法服务。
 *
 * Program Counter Calculate(程序计数器):
 *      存储线程执行下一条指令位置，每条线程都有独立的程序计数器
 * */
