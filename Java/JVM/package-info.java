package kasei.javase.jvm;


/** todo JVM 架构总览
 * 1. 类加载系统：
 * 2. JVM 内存分区（运行时数据区）：
 * 3. 执行引擎
 * 4. JNI(Java Native Interface):
 * */

/** todo 类加载系统介绍
 * 第 1 步：装载，由 类加载器 从 源 加载 Java 字节码，其中 源 不仅仅只是 .class 文件，还包括网络流，总之是一切包含字节码的流
 *      Bootstrap ClassLoader: 负责加载位于bootstrap classpath下的类。
 *      Extension ClassLoader: 负责加载位于ext folder (jre\lib).下的类
 *      Application ClassLoader: 负责加载位于应用级别的路径，路径提到的环境变量等。
 *
 * 第 2 步：链接，包括 验证、准备、解析
 *      验证： 字节码验证器会验证字节码是否符合规范，如果不符合报错
 *      准备： 为所有的静态变量分配内存，并设置默认值，该默认不是代码中设置的值，是该类型的默认值
 *      解析： 字节码中所有的符号内存引用都被方法区的原始引用所取代。
 *
 * 第 3 步：初始化
 *      为所有的静态变量分配 初始值（代码中设置的值），静态代码块将被执行
 * */



/** todo 执行引擎：经过运行时数据区分配的字节码被执行引擎执行。执行引擎阅读字节码，并一块一块地执行。
 *  解释器：
 *  JIT 编译器：
 *  垃圾回收：
 *  本地方法库：
 *  本地方法库接口：
 * */

