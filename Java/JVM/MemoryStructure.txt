JVM 内存架构：
    Heap: 被所有线程共享的内存区域，在虚拟机启动时创建，该区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。该区域也是垃圾收集器的主要区域。
        年轻代： Minor GC, GC 算法为：复制法
            eden(伊甸园)：
            Survivor1：
            Survivor2： Survivor 1 和 2 每次只使用一个
            
        老年代：Major GC 或 Full GC, GC 算法为：标记-清除、标记-整理，大对象直接进 老年代
        
    Method Area：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
        常量池：
            Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，
            用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。
            
    Thread Stack: 每个线程都会创建独立的运行时栈，对于每个方法调用，会在栈存储器中创建一个栈帧条目
        栈帧：
            a) 局部变量数组-相关方法的局部变量及其值将会存储在这里
            b) 操作数栈-如果需要任何中间操作，操作数栈将作为运行时工作区来执行操作。、
            c) 帧数据-对应于该方法的所有符号存储在这里。在任何异常情况下，捕获的信息将保持在帧数据中
    
    Native Method Stack：与 Thread Stack 作用相似，区别是虚拟机栈为虚拟机执行Java方法服务，而本地方法栈为虚拟机用到的Native方法服务
    
    Program Counter：存储线程执行下一条指令位置，每条线程都有独立的程序计数器
